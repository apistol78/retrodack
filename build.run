--[[
 RetroDÃ„CK
 Copyright (c) 2025 Anders Pistol.

 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at https://mozilla.org/MPL/2.0/.
]]

import (traktor)

run:loadScript("../klara-rv/sv2v.run")

local PATH_SOC < const > = "rtl"
local PATH_PERIFHERIALS < const > = "../klara-rv/rtl"

local SOURCE < const > =
{
	PATH_SOC .. "/RetroDACK.sv",
	PATH_SOC .. "/RetroDACK_BROM.sv",
	PATH_PERIFHERIALS .. "/block/BRAM.sv",
	PATH_PERIFHERIALS .. "/clock/PLL_ECP5.sv",
	PATH_PERIFHERIALS .. "/fifo/FIFO.sv",
	PATH_PERIFHERIALS .. "/misc/Bridge.sv",
	PATH_PERIFHERIALS .. "/misc/ClockDivider.sv",
	PATH_PERIFHERIALS .. "/misc/Timer.sv",
	PATH_PERIFHERIALS .. "/sdram/SDRAM_controller.sv",
	PATH_PERIFHERIALS .. "/uart/UART.sv",
	PATH_PERIFHERIALS .. "/uart/UART_RX.sv",
	PATH_PERIFHERIALS .. "/uart/UART_TX.sv",
	PATH_PERIFHERIALS .. "/i2c/I2C.sv",
	PATH_PERIFHERIALS .. "/cpu/CPU.sv",
	PATH_PERIFHERIALS .. "/cpu/CPU_BusMux.sv",
	PATH_PERIFHERIALS .. "/cpu/CPU_PLIC.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_ALU.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_BRAM.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_BRAM_1r1w.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_CSR.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_DCache_Comb.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_DCache_None.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_DCache_Reg.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Decode.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Defines.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Divide.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Execute.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Fetch.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Forward.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_ICache_Comb.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_ICache_None.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_ICache_Reg.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Memory.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Multiply.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_PreDecode.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Registers.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_SkidBuffer.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Types.sv",
	PATH_PERIFHERIALS .. "/cpu/private/CPU_Writeback.sv",
	PATH_PERIFHERIALS .. "/cpu/private/fpu/CPU_FPU.sv",
	PATH_PERIFHERIALS .. "/cpu/private/fpu/CPU_FPU_Add.sv",
	PATH_PERIFHERIALS .. "/cpu/private/fpu/CPU_FPU_Compare.sv",
	PATH_PERIFHERIALS .. "/cpu/private/fpu/CPU_FPU_Div.sv",
	PATH_PERIFHERIALS .. "/cpu/private/fpu/CPU_FPU_Float.sv",
	PATH_PERIFHERIALS .. "/cpu/private/fpu/CPU_FPU_Int.sv",
	PATH_PERIFHERIALS .. "/cpu/private/fpu/CPU_FPU_Mul.sv",
	PATH_PERIFHERIALS .. "/cpu/private/fpu/CPU_FPU_MulAdd.sv"
}

local function buildRV()
	local TRAKTOR_HOME < const > = os:getEnvironment("TRAKTOR_HOME")
	local SCRIPT_HOME < const > = fileSystem:getAbsolutePath(Path(os:getEnvironment("RUN_SCRIPT_PATH"))):normalized().pathNameOS

	os:setEnvironment("MAKE_OS", "linux")
	os:setEnvironment("MAKE_DIALECT", "make")
	os:setEnvironment("MAKE_FORMAT", TRAKTOR_HOME .. "/resources/build/configurations/make-format.sbm")
	os:setEnvironment("MAKE_INCLUDE", SCRIPT_HOME .. "/../klara-rv/make-config-rv32imf_zicsr.inc")
	os:setEnvironment("MAKE_TOOLCHAIN", "gcc")
	os:setEnvironment("MAKE_OBJECT_FILE", "%s.o")
	os:setEnvironment("MAKE_STATIC_LIBRARY_FILE", "lib%s.a")
	os:setEnvironment("MAKE_SHARED_LIBRARY_FILE", "lib%s.so")
	os:setEnvironment("MAKE_EXECUTABLE_FILE", "%s")
	os:setEnvironment("MAKE_VERBOSE", "false")
	os:setEnvironment("MAKE_HOME", SCRIPT_HOME)

	run:execute(
		TRAKTOR_HOME .. "/bin/linux/releasestatic/Traktor.SolutionBuilder.App " ..
		"-verbose " ..
		"-f=make2 " ..
		"-make-solution-template=" .. TRAKTOR_HOME .. "/resources/build/configurations/make-solution.sbm " ..
		"-make-project-template=" .. TRAKTOR_HOME .. "/resources/build/configurations/make-project.sbm " ..
		"retrodack-rv.xms"
	)

	run:pushd("build/rv")
	if run:execute("make -f RetroDACK.mak ReleaseStatic") ~= 0 then return false end
	run:popd()

	-- Create HEX and dump files of firmware.
	run:execute("riscv32-unknown-elf-objcopy -O ihex build/rv/ReleaseStatic/Firmware build/rv/ReleaseStatic/Firmware.hex")
	run:execute("riscv32-unknown-elf-objdump -D build/rv/ReleaseStatic/Firmware", "build/rv/ReleaseStatic/Firmware.dump")

	-- Create Verilog files of firmware.
	run:execute("../klara-rv/bin/Hex2Verilog -word=32 build/rv/ReleaseStatic/Firmware.hex -vmem=build/rv/ReleaseStatic/Firmware.vmem -vmem-range=build/rv/ReleaseStatic/Firmware.vmem-range")

	return true
end

local function buildHostLinux()
	local TRAKTOR_HOME < const > = os:getEnvironment("TRAKTOR_HOME")

	os:setEnvironment("MAKE_OS", "linux")
	os:setEnvironment("MAKE_DIALECT", "make")
	os:setEnvironment("MAKE_FORMAT", TRAKTOR_HOME .. "/resources/build/configurations/make-format.sbm")
	os:setEnvironment("MAKE_INCLUDE", TRAKTOR_HOME .. "/resources/build/configurations/make-config-linux.inc")
	os:setEnvironment("MAKE_TOOLCHAIN", "gcc")
	os:setEnvironment("MAKE_OBJECT_FILE", "%s.o")
	os:setEnvironment("MAKE_STATIC_LIBRARY_FILE", "lib%s.a")
	os:setEnvironment("MAKE_SHARED_LIBRARY_FILE", "lib%s.so")
	os:setEnvironment("MAKE_EXECUTABLE_FILE", "%s")
	os:setEnvironment("MAKE_VERBOSE", "false")

	run:execute(
		TRAKTOR_HOME .. "/bin/linux/releasestatic/Traktor.SolutionBuilder.App " ..
		"-f=make2 " ..
		"-make-solution-template=" .. TRAKTOR_HOME .. "/resources/build/configurations/make-solution.sbm " ..
		"-make-project-template=" .. TRAKTOR_HOME .. "/resources/build/configurations/make-project.sbm " ..
		"retrodack-linux.xms"
	)

	run:pushd("build/linux")
	if run:execute("make -f RetroDACK.mak ReleaseStatic") ~= 0 then return false end
	run:popd()

	return true
end

function main()

	-- Compile firmware and tools.
	if not buildRV() then return 1 end
	if not buildHostLinux() then return 1 end

	local synthesize < const > = false
	if synthesize then
		-- Ensure we can launch yosys before all else.
		if os:whereIs("yosys") == nil then
			stderr:printLn("Unable to locate yosys; ensure it's accessible through PATH.")
			return 1
		end

		-- Create constraints.
		run:run("./generate-constraints.run", "rtl/Constraints.lpf")
		run:run("./generate-top-io.run", "rtl/RetroDACK_IO.sv")

		-- Convert all source files into Verilog.
		local f = ""
		for _, sv in ipairs(SOURCE) do
			local v = sv2v(
				sv,
				{ ".", "./rtl", PATH_PERIFHERIALS .. "/cpu" },
				{},
				"build/rtl-v"
			)
			f = f .. " " .. v
		end
		stdout:printLn(f)

		-- Ensure old bit file is removed.
		run:rm("build/RetroDACK.bit")
		run:rm("build/RetroDACK.json")
		run:rm("build/RetroDACK.log")

		-- Synthesize
		local xc = run:execute("yosys -l build/RetroDACK.log -p \"opt; share -aggressive; synth_ecp5 -abc9 -json build/RetroDACK.json\" " .. f)
		if xc ~= 0 then
			stderr:printLn("yosys failed; build aborted.")
			return 1
		end

		-- Place and route.
		local xc = run:execute("nextpnr-ecp5 --25k --package CABGA256 --speed 6 --timing-allow-fail --top RetroDACK --json build/RetroDACK.json --textcfg build/RetroDACK.config --lpf rtl/Constraints.lpf --report build/RetroDACK.report.json --freq 100")
		if xc ~= 0 then
			stderr:printLn("nextpnr-ecp5 failed; build aborted.")
			return 1
		end

		-- Create bit file.
		local xc = run:execute("ecppack --compress --svf build/RetroDACK.svf build/RetroDACK.config build/RetroDACK.bit")
		if xc ~= 0 then
			stderr:printLn("ecppack failed; build aborted.")
			return 1
		end

		-- Program target.
		local xc = run:execute("openFPGALoader -c cmsisdap --vid=0x1d50 --pid=0x602b ./build/RetroDACK.bit")
		if xc ~= 0 then
			stderr:printLn("openFPGALoader failed; build aborted.")
			return 1
		end
	end

	stdout:printLn("Build successful.")
	return 0
end
